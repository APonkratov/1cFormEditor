////////////////////////////////////////////////////////////////////////////////
// Модуль "ккПодготовкаФорм" содержит процедуры и функции для 
// подговтоки форм для работы с нетиповым фнукционалом системы.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет выполнялась ли уже подготовка формы для работы с нетиповым функционалом системы.
//
// Параметры:
// Форма - УправляемаяФорма
//
Функция ФормаПодготовлена(Форма) Экспорт
	
	Если Форма.Элементы.Найти("ккФормаПодготовлена") = Неопределено Тогда
		ФормаПодготовлена = Форма.Элементы.Добавить("ккФормаПодготовлена", Тип("ДекорацияФормы"));
		ФормаПодготовлена.Видимость = Ложь;
		ФормаПодготовлена.Доступность = Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СоздатьКонтекстЭлемента(Форма, Родитель = Неопределено, РасположитьПередЭлементом = Неопределено)
	
	СтруктураКонтекст = Новый Структура();
	СтруктураКонтекст.Вставить("Форма", Форма);
	СтруктураКонтекст.Вставить("Родитель", Родитель);
	СтруктураКонтекст.Вставить("РасположитьПередЭлементом", РасположитьПередЭлементом);
	
	Возврат СтруктураКонтекст;
	
КонецФункции


#Область ДобавлениеПолей

// Функция добавляет поле на форму
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяПоля - Строка - Имя создааваемого поля.
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства команды.
//	Родитель - Произвольный - Ссылка на родителя.
//	ЭтоПолеВвода - Булево - Определяет возможность ввода в добавляемое поле
//
// Возвращаемое значение:
//	ЭлементФормы - добавленный на форму, новый элемент формы.
//
//Пример:
//
// Добавление элеента табличной части
//	ПараметрыОтображения = Новый Структура;
//	ПараметрыОтображения.Вставить("ПутьКДанным", "Объект.РасшифровкаПлатежа.ккОснованиеПлатежа");
//	ПараметрыОтображения.Вставить("Вид", ВидПоляФормы.ПолеВвода);
//	ккПодготовкаФорм.ДобавитьПолеНаФорму(ЭтаФорма, "ккРасшифровкаПлатежаОснованиеПлатежа", ПараметрыОтображения, Элементы.РасшифровкаПлатежа);
//
// Добавление элмента на форму
//	ПараметрыОтображения.Вставить("ПутьКДанным", "ВидДоговора");
//	ккПодготовкаФорм.ДобавитьПолеНаФорму(ЭтаФорма, "ВидДоговора", ПараметрыОтображения, Элементы.БыстрыеОтборы, Истина);
//
Функция ДобавитьПолеНаФорму(КонтекстЭлемента,
							ИмяПоля,
							ПараметрыОтображения) Экспорт
							
	Форма = КонтекстЭлемента.Форма;
	Родитель = КонтекстЭлемента.Родитель;
	
	ПолеФормы = Форма.Элементы.Добавить(ИмяПоля, Тип("ПолеФормы"), Родитель);

	ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;

	ЗаполнитьЗначенияСвойств(ПолеФормы,ПараметрыОтображения);	
	РасположитьПередЭлементом(КонтекстЭлемента, ПолеФормы);
	
	Возврат ПолеФормы;
	
КонецФункции

// Функция добавляет поле на форму для реквизита формы
//
// Параметры:
//	Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяРеквизита - Строка - Имя реквизита формы.
//	Родитель - Произвольный - Ссылка на родителя.
//	ЭтоПолеВвода - Булево - Определяет возможность ввода в добавляемое поле
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства команды.
//
//Пример:
//
//	ккПодготовкаФорм.ДобавитьПолеНаФормуРеквизитФормы(ЭтаФорма, "ккПравилаОплаты", Элементы.ГруппаСлева, Истина);
//
Функция ДобавитьПолеНаФормуРеквизитФормы(КонтекстЭлемента, 
											ИмяРеквизита,  
											ПараметрыОтображения = Неопределено) Экспорт
	Форма = КонтекстЭлемента.Форма;
	Родитель = КонтекстЭлемента.Родитель;
		
	Если ТипЗнч(ПараметрыОтображения) = Тип("Структура") Тогда
		Если Не ПараметрыОтображения.Свойство("ПутьКДанным") Тогда
			ПараметрыОтображения.Вставить("ПутьКДанным", ИмяРеквизита);
		КонецЕсли;
	Иначе
		ПараметрыОтображения = Новый Структура;
		ПараметрыОтображения.Вставить("ПутьКДанным", ИмяРеквизита);
	КонецЕсли;
	
	ПолеФормы = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Родитель);

	ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;

	ЗаполнитьЗначенияСвойств(ПолеФормы, ПараметрыОтображения);
	РасположитьПередЭлементом(КонтекстЭлемента, ПолеФормы);
		
	ПараметрыОтображения.Удалить("ПутьКДанным");
	
	Возврат ПолеФормы
	
КонецФункции

#КонецОбласти

#Область ДобавлениеГрупп

// Процедура добавляет группу на форму
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяГруппы - Строка - Имя создаваемой группы.
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства.
//	Родитель - Произвольный - Ссылка на родителя.
//	РасположитьПередЭлементом - ВсеЭлементыФормы - Указывает, перед каким элеменом формы разместить добавляемую группу
//
// Возвращаемое значение:
//	ЭлементФормы - добавленный на форму, новый элемент формы.
//
//	ПараметрыОтображения = Новый Структура("Вид, Группировка, ОтображатьЗаголовок", ВидГруппыФормы.ОбычнаяГруппа, ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно, Ложь);
//	ЭлементГруппаБулево = ккПодготовкаФорм.ДобавитьГруппуНаФорму(ЭтаФорма, "ГруппаБулево", ПараметрыОтображения); 
//
Функция ДобавитьГруппуНаФорму(КонтекстЭлемента, 
								ИмяГруппы, 
								ПараметрыОтображения = Неопределено) Экспорт
	
	Форма = КонтекстЭлемента.Форма;
	Родитель = КонтекстЭлемента.Родитель;
	
	ГруппаФормы = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	
	Если ТипЗнч(ПараметрыОтображения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ГруппаФормы,ПараметрыОтображения);
	КонецЕсли;
	
	РасположитьПередЭлементом(КонтекстЭлемента, ГруппаФормы)

	Возврат ГруппаФормы;
	
КонецФункции


	
Процедура РасположитьПередЭлементом(КонтекстЭлемента, Элемент)

	Форма = КонтекстЭлемента.Форма;
	Родитель = Неопределено
	РасположитьПередЭлементом = Неопределено
	КонтекстЭлемента.Свойство("Родитель", Родитель);
	КонтекстЭлемента.Свойство("РасположитьПередЭлементом", РасположитьПередЭлементом);

	Если РасположитьПередЭлементом <> Неопределено Тогда
		ПереместитьЭлемент(Элемент, РасположитьПередЭлементом, Родитель, Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет группу и 2 вложенные группы(ИмяОсновнойГруппы+"Лево" и ИмяОсновнойГруппы+"Право") на форму 
//	основная группа с горизонтальной группировкой, вложенные группы с вертикальной группировкой
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяГруппы - Строка - Имя создаваемой группы.
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства.
//	Родитель - Произвольный - Ссылка на родителя.
//	РасположитьПередЭлементом - ВсеЭлементыФормы - Указывает, перед каким элеменом формы разместить добавляемую группу
//
// Возвращаемое значение:
//	ЭлементФормы - добавленный на форму, основная группа, которые содержит группы, которые являются колонками.
//
Функция ДобавитьГруппуСКолонкамиЛевоИПраво(Форма, ИмяОсновнойГруппы, ПараметрыОтображения, Родитель = Неопределено, РасположитьПередЭлементом = Неопределено) Экспорт
	
	ИмяГруппыЛево = ИмяОсновнойГруппы+"Лево";
	ИмяГруппыПраво = ИмяОсновнойГруппы+"Право";
	
	ГруппаФормы = Форма.Элементы.Добавить(ИмяОсновнойГруппы, Тип("ГруппаФормы"), Родитель);
	
	Если Не ТипЗнч(ПараметрыОтображения) = Тип("Структура") Тогда
		ПараметрыОтображения = Новый Структура;
	КонецЕсли;
	
	#Область ЗначенияПоУмолчанию
	Если Не ПараметрыОтображения.Свойство("Вид") Тогда
		ПараметрыОтображения.Вставить("Вид", ВидГруппыФормы.ОбычнаяГруппа);
	КонецЕсли;
	Если Не ПараметрыОтображения.Свойство("Группировка") Тогда
		ПараметрыОтображения.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	КонецЕсли;
	Если Не ПараметрыОтображения.Свойство("ОтображатьЗаголовок") Тогда
		ПараметрыОтображения.Вставить("ОтображатьЗаголовок", Ложь);
	КонецЕсли;
	#КонецОбласти
	
	Если ТипЗнч(ПараметрыОтображения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ГруппаФормы,ПараметрыОтображения);
	КонецЕсли;

	Если РасположитьПередЭлементом <> Неопределено Тогда
		ПереместитьЭлемент(ГруппаФормы, РасположитьПередЭлементом, Родитель, Форма);
	КонецЕсли;
	
	ПараметрыОтображенияВложенных = Новый Структура;
	ПараметрыОтображенияВложенных.Вставить("Вид", ПараметрыОтображения.Вид);
	ПараметрыОтображенияВложенных.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыОтображенияВложенных.Вставить("ОтображатьЗаголовок", ПараметрыОтображения.ОтображатьЗаголовок);
	
	ДобавитьГруппуНаФорму(Форма, ИмяГруппыЛево, ПараметрыОтображенияВложенных, ГруппаФормы);
	ДобавитьГруппуНаФорму(Форма, ИмяГруппыПраво, ПараметрыОтображенияВложенных, ГруппаФормы);

	Возврат ГруппаФормы;

КонецФункции

#КонецОбласти

#Область ДобавлениеТаблиц

// Функция добавляет таблицу на форму
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяПоля - Строка - Имя создааваемой таблицы.
//	ПутьКДанным - Строка - Имя создааваемого поля.
//	СтруктураКолонок - Структура - структура, по данным которой будут созданы колонки 
//		у которых значение элемента структуры будет соответствовать реквизиту таблицы, 
//		а ключ будет именем добавляемого поля.
//	Родитель - Произвольный - Ссылка на родителя.
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства команды.
//
//Пример:
//
//	СтруктураКолонок = Новый Структура;
//	СтруктураКолонок.Вставить("МенеджерыМенеджер", "Менеджер");
//	СтруктураКолонок.Вставить("МенеджерыНаправлениеДеятельности", "НаправлениеДеятельности");
//	ккПодготовкаФорм.ДобавитьТаблицуНаФорму(ЭтаФорма, "ТаблицаМенеджеры", "Объект.ккМенеджеры", СтруктураКолонок, Элементы.ГруппаРодительБизнесРегион);
//
Функция ДобавитьТаблицуНаФорму(Форма, ИмяПоля, ПутьКДанным, СтруктураКолонок = Неопределено, Родитель = Неопределено, ПараметрыОтображения = Неопределено, РасположитьПередЭлементом = Неопределено) Экспорт
	
	ПолеФормы = Форма.Элементы.Добавить(ИмяПоля, Тип("ТаблицаФормы"), Родитель);
	
	Если ПараметрыОтображения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПолеФормы, ПараметрыОтображения);
	КонецЕсли;
	
	ПолеФормы.ПутьКДанным = ПутьКДанным;
	
	Если РасположитьПередЭлементом <> Неопределено Тогда
		ПереместитьЭлемент(ПолеФормы, РасположитьПередЭлементом, Родитель, Форма);
	КонецЕсли;
	
	Если СтруктураКолонок <> Неопределено Тогда
		Для Каждого Элемент Из СтруктураКолонок Цикл
			
			Параметры = Новый Структура;
			Параметры.Вставить("ПутьКДанным", ПутьКДанным+"."+Элемент.Значение);
			ДобавитьПолеНаФорму(Форма, Элемент.Ключ, Параметры, ПолеФормы, Истина);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПолеФормы;
	
КонецФункции

// Функция добавляет поле таблицы на форму
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ПутьТабличнойЧасти - Строка - Путь к табличной части, колонку которая выводится.
//	ИмяКолонкиТабличнойЧасти - Строка - Имя колонки, которая выводится.
//	Родитель - Произвольный - Ссылка на родителя.
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства поля.
//	ЭтоПолеВвода - Булево - Определяет возможность ввода в добавляемое поле
//
// Возвращаемое значение:
//	ЭлементФормы - добавленный на форму, новый элемент формы.
//
//Пример:
//
// ккПодготовкаФорм.ДобавитьПолеТабличнойЧастиНаформу(ЭтаФорма, "Объект.Товары", "ккДатаОтгрузки", Элементы.Товары);
//
Функция ДобавитьПолеТабличнойЧастиНаформу(Форма, 
											ПутьТабличнойЧасти, 
											ИмяКолонкиТабличнойЧасти, 
											Родитель = Неопределено, 
											Знач ПараметрыОтображения = Неопределено,
											ЭтоПолеВвода = Истина,
											РасположитьПередЭлементом = Неопределено) Экспорт
	
	ПутьКДанным = СокрЛП(ПутьТабличнойЧасти)+"."+СокрЛП(ИмяКолонкиТабличнойЧасти);
	
	МассивПутьКТабличнойЧасти = РазложитьСтрокуВМассивПодстрок(ПутьТабличнойЧасти, ".", Истина);
	ПоследнееСлово = МассивПутьКТабличнойЧасти[МассивПутьКТабличнойЧасти.Количество()-1];
	ИмяПоляТабличнойЧасти = СокрЛП(ПоследнееСлово)+СокрЛП(ИмяКолонкиТабличнойЧасти);
	
	Если ТипЗнч(ПараметрыОтображения) = Тип("Структура") Тогда
		Если Не ПараметрыОтображения.Свойство("ПутьКДанным") Тогда
			ПараметрыОтображения.Вставить("ПутьКДанным", ПутьКДанным);
		КонецЕсли;
	Иначе
		ПараметрыОтображения = Новый Структура;
		ПараметрыОтображения.Вставить("ПутьКДанным", ПутьКДанным);
	КонецЕсли;
	
	ПолеФормы = ДобавитьПолеНаФорму(Форма, ИмяПоляТабличнойЧасти, ПараметрыОтображения, Родитель, ЭтоПолеВвода);
	
	Если РасположитьПередЭлементом <> Неопределено Тогда
		ПереместитьЭлемент(ПолеФормы, РасположитьПередЭлементом, Родитель, Форма);
	КонецЕсли;

	Возврат ПолеФормы;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеКоманд

// Функция добавляет команду на форму
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяКнопки - Строка - Имя создааваемой кнопки.
//	ВидКнопки - ВидКнопкиФормы - Вид кнопки.
//	ИмяКоманды - Строка - Имя команды.
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства команды.
//	Родитель - Произвольный - Ссылка на родителя.
//
Функция ДобавитьКнопкуНаФорму(Форма, ИмяКнопки, ВидКнопки, ИмяКоманды, ПараметрыОтображения = Неопределено, Родитель = Неопределено, РасположитьПередЭлементом = Неопределено) Экспорт
	 
	Кнопка = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Родитель);
	Кнопка.Вид = ВидКнопки;
	Кнопка.ИмяКоманды = ИмяКоманды;
	
	Если РасположитьПередЭлементом <> Неопределено Тогда
		ПереместитьЭлемент(Кнопка, РасположитьПередЭлементом, Родитель, Форма);
	КонецЕсли;

	Если ПараметрыОтображения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Кнопка, ПараметрыОтображения);
	КонецЕсли;
	
	Возврат Кнопка;
	
КонецФункции

// Функция добавляет команду и гиперссылку на форму
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяКоманды - Строка - Имя создааваемой команды.
//	ПроцедураОбработки - Строка - Имя процедуры обработки.
//	ЗаголовокГиперссылки - Строка - Заголовок команды.
//	ГруппаВывода - Произвольный - Ссылка на родителя.
//
Функция ДобавитьКомандуИГиперссылкуНаФорму(Форма, ИмяКоманды, ПроцедураОбработки, ЗаголовокГиперссылки, ГруппаВывода) Экспорт
	
	ДобавитьКомандуНаФорму(Форма,
						ИмяКоманды,
						ПроцедураОбработки,
						ЗаголовокГиперссылки);
	
	Кнопка = ДобавитьКнопкуНаФорму(Форма,
						ИмяКоманды,
						ВидКнопкиФормы.КнопкаКоманднойПанели,
						ИмяКоманды,
						Новый Структура("Вид", ВидКнопкиФормы.Гиперссылка), 
						ГруппаВывода);
						
	Возврат Кнопка;
	
КонецФункции

// Функция добавляет команду и кнопку командной панели
//  на форму будет добавлена команда с действием "Подключаемый_"+ИмяКоманды
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяКоманды - Строка - Имя создааваемой команды.
//	ЗаголовокКнопки - Строка - Заголовок команды.
//	ГруппаВывода - Произвольный - Ссылка на родителя.
//	РасположитьПередЭЛементом - ГруппаФормы; ТаблицаФормы; УправляемаяФорма - Элемент перед которым требуется разместить новый элемент.
//
Функция ДобавитьКомандуИКнопкуКоманднойПанели(Форма, ИмяКоманды, ЗаголовокКнопки, ГруппаВывода, РасположитьПередЭлементом = Неопределено) Экспорт
	
	ИмяДействия = "Подключаемый_"+ИмяКоманды;
	
	ДобавитьКомандуНаФорму(Форма,
						ИмяКоманды, 
						ИмяДействия,
						ЗаголовокКнопки);
	
	Кнопка = ДобавитьКнопкуНаФорму(Форма,
						ИмяКоманды,
						ВидКнопкиФормы.КнопкаКоманднойПанели,
						ИмяКоманды,
						,
						ГруппаВывода,
						РасположитьПередЭлементом);
	
	Возврат Кнопка;
	
КонецФункции

// Функция добавляет команду и кнопку формы
//  на форму будет добавлена команда с действием "Подключаемый_"+ИмяКоманды
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяКоманды - Строка - Имя создааваемой команды.
//	ЗаголовокКнопки - Строка - Заголовок команды.
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства команды.
//	Родитель - Произвольный - Ссылка на родителя.
//	РасположитьПередЭЛементом - ГруппаФормы; ТаблицаФормы; УправляемаяФорма - Элемент перед которым требуется разместить новый элемент.
//
Функция ДобавитьКомандуИКнопкуНаФорму(Форма, ИмяКоманды, ЗаголовокКнопки, ПараметрыОтображения = Неопределено, Родитель = Неопределено, РасположитьПередЭлементом = Неопределено) Экспорт
	
	ИмяДействия = "Подключаемый_"+ИмяКоманды;
	
	ДобавитьКомандуНаФорму(Форма,
						ИмяКоманды, 
						ИмяДействия,
						ЗаголовокКнопки);
	
	Кнопка = ДобавитьКнопкуНаФорму(Форма,
						ИмяКоманды,
						ВидКнопкиФормы.ОбычнаяКнопка,
						ИмяКоманды,
						ПараметрыОтображения,
						Родитель,
						РасположитьПередЭлементом);
	
	Возврат Кнопка;
	
КонецФункции

// Функция добавляет команду на форму
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяКоманды - Строка - Имя создааваемой команды.
//	ИмяДействия - Строка - Действие команды.
//	Заголовок - Строка - Заголовок команды.
//	Подсказка - Строка - Подсказка команды.
//
Функция ДобавитьКомандуНаФорму(Форма, ИмяКоманды, ИмяДействия, Заголовок, Подсказка = "") Экспорт
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Действие = ИмяДействия;
	Команда.Заголовок = Заголовок;
	Команда.Подсказка = Подсказка;
	
	Возврат Команда;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеРеквизитовОбъекта

// Функция добавляет реквизит объекта определяя ВидПоляФормы по типу значения
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяРеквизита - Строка - Имя создааваемого поля и он же имя реквизита объекта.
//	Родитель - Произвольный - Ссылка на родителя.
//	ЭтоПолеВвода - Булево - Определяет возможность ввода в добавляемое поле
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства команды.
//	РасположитьПередЭлементом - ВсеЭлементыФормы - Указывает, перед каким элеменом формы разместить добавляемую группу
//
//Пример:
//	ккПодготовкаФорм.ДобавитьРеквизитОбъектаНаФорму(ЭтаФорма, "ккВидДоговора", Элементы.ГруппаШапкаПраво);
//
Функция ДобавитьРеквизитОбъектаНаФорму(Форма,
										ИмяРеквизита, 
										Родитель = Неопределено,
										ПараметрыОтображения = Неопределено,
										РасположитьПередЭлементом = Неопределено) Экспорт

	Если ТипЗнч(Форма.Объект[ИмяРеквизита]) = Тип("Булево") Тогда
											
		Если ПараметрыОтображения  = Неопределено Тогда
			ПараметрыОтображения = Новый Структура("ПоложениеЗаголовка" ,ПоложениеЗаголовкаЭлементаФормы.Право);
		ИначеЕсли Не ПараметрыОтображения.Свойство("ПоложениеЗаголовка") Тогда
			ПараметрыОтображения.Вставить("ПоложениеЗаголовка" ,ПоложениеЗаголовкаЭлементаФормы.Право);
		КонецЕсли;
		
		Возврат ДобавитьПолеФлажкаНаФормуРеквизитОбъекта(Форма, ИмяРеквизита, Родитель, ПараметрыОтображения, РасположитьПередЭлементом);
	Иначе
		Возврат ДобавитьПолеНаФормуРеквизитОбъекта(Форма, ИмяРеквизита, Родитель, Истина, ПараметрыОтображения, РасположитьПередЭлементом);
	КонецЕсли;

КонецФункции


// Функция добавляет поле реквизита объекта на форму и возвращает добавленный элемент
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяРеквизита - Строка - Имя создааваемого поля и он же имя реквизита объекта.
//	Родитель - Произвольный - Ссылка на родителя.
//	ЭтоПолеВвода - Булево - Определяет возможность ввода в добавляемое поле
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства команды.
//	РасположитьПередЭлементом - ВсеЭлементыФормы - Указывает, перед каким элеменом формы разместить добавляемую группу
//
//Пример:
//	ккПодготовкаФорм.ДобавитьПолеНаФормуРеквизитОбъекта(ЭтаФорма, "ккВидДоговора", Элементы.ГруппаШапкаПраво, Истина);
//
Функция ДобавитьПолеНаФормуРеквизитОбъекта(Форма,
											ИмяРеквизита, 
											Родитель = Неопределено,
											ЭтоПолеВвода = Ложь,
											ПараметрыОтображения = Неопределено,
											РасположитьПередЭлементом = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыОтображения) = Тип("Структура") Тогда
		Если Не ПараметрыОтображения.Свойство("ПутьКДанным") Тогда
			ПараметрыОтображения.Вставить("ПутьКДанным", "Объект."+ИмяРеквизита);
		КонецЕсли;
	Иначе
		ПараметрыОтображения = Новый Структура;
		ПараметрыОтображения.Вставить("ПутьКДанным", "Объект."+ИмяРеквизита);
	КонецЕсли;
	
	ПолеФормы = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Родитель);
	Если ЭтоПолеВвода = Истина Тогда
		ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПолеФормы, ПараметрыОтображения);
	
	Если РасположитьПередЭлементом <> Неопределено Тогда
		ПереместитьЭлемент(ПолеФормы, РасположитьПередЭлементом, Родитель, Форма);
	КонецЕсли;

	ПараметрыОтображения.Удалить("ПутьКДанным");
	
	Возврат ПолеФормы;
	
КонецФункции

// Функция добавляет поле реквизита объекта на форму с заданным значением МаксимальнаяШирина = 28
//	для вывода в шапку формы, согласно рекомендации адаптации интерфейсов
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяРеквизита - Строка - Имя создааваемого поля и он же имя реквизита объекта.
//	Родитель - Произвольный - Ссылка на родителя.
//	ЭтоПолеВвода - Булево - Определяет возможность ввода в добавляемое поле
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства команды.
//
//Пример:
//	ккПодготовкаФорм.ДобавитьПолеВШапкуФормыРеквизитОбъекта(ЭтаФорма, "ккВидДоговора", Элементы.ГруппаШапкаПраво, Истина);
//
Функция ДобавитьПолеВШапкуФормыРеквизитОбъекта(Форма, ИмяРеквизита, Родитель = Неопределено, ЭтоПолеВвода = Ложь, ПараметрыОтображения = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыОтображения) = Тип("Структура") Тогда
		Если Не ПараметрыОтображения.Свойство("АвтоМаксимальнаяШирина") Тогда
			ПараметрыОтображения.Вставить("АвтоМаксимальнаяШирина", Ложь);
			ПараметрыОтображения.Вставить("МаксимальнаяШирина", 28);
		КонецЕсли;
	Иначе
		ПараметрыОтображения = Новый Структура;
		ПараметрыОтображения.Вставить("МаксимальнаяШирина", 28);
		ПараметрыОтображения.Вставить("АвтоМаксимальнаяШирина", Ложь);
	КонецЕсли;
	
	ПолеФормы = ДобавитьПолеНаФормуРеквизитОбъекта(Форма, ИмяРеквизита, Родитель, ЭтоПолеВвода, ПараметрыОтображения);
	
	Возврат ПолеФормы;
	
КонецФункции

// Добавляет многострочное поле реквизита объекта и возвращает элемент формы, добавленный на форму.
//
// Параметры:
//	Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяРеквизита - Строка - Имя создааваемого поля и он же имя реквизита объекта.
//	Родитель - ГруппаФормы; ТаблицаФормы; УправляемаяФорма - Родитель элемента.
//	РасположитьПередЭЛементом - ГруппаФормы; ТаблицаФормы; УправляемаяФорма - Элемент перед которым требуется разместить новый элемент.
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства команды.
//	Высота - Число - Высота многострочного поля.
//
// Возвращаемое значение:
//	ЭлементФормы - добавленный на форму, новый элемент формы.
//
Функция ДобавитьМногострочноеПолеРеквизитОбъекта(Форма,
												ИмяРеквизита,
												Родитель = Неопределено,
												РасположитьПередЭлементом = Неопределено, 
												ПараметрыОтображения = Неопределено,
												Высота = 2) Экспорт
	
	Если ТипЗнч(ПараметрыОтображения) = Тип("Структура") Тогда
		Если Не ПараметрыОтображения.Свойство("ПутьКДанным") Тогда
			ПараметрыОтображения.Вставить("ПутьКДанным", "Объект."+ИмяРеквизита);
		КонецЕсли;
	Иначе
		ПараметрыОтображения = Новый Структура;
		ПараметрыОтображения.Вставить("ПутьКДанным", "Объект."+ИмяРеквизита);
	КонецЕсли;
	
	ПолеФормы = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Родитель);
	ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
	
	ЗаполнитьЗначенияСвойств(ПолеФормы, ПараметрыОтображения);
	
	Если РасположитьПередЭлементом <> Неопределено Тогда
		ПереместитьЭлемент(ПолеФормы, РасположитьПередЭлементом, Родитель, Форма);
	КонецЕсли;
	
	ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ПолеФормы.РастягиватьПоВертикали = Ложь;
	ПолеФормы.АвтоМаксимальнаяВысота = Ложь;
	ПолеФормы.АвтоМаксимальнаяШирина = Ложь;
	ПолеФормы.МногострочныйРежим = Истина;
	ПолеФормы.Высота = Высота;

	Возврат ПолеФормы;
	
КонецФункции

// Функция добавляет флажок реквизита объекта на форму и возвращает добавленный элемент
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой выполняется действие.
//	ИмяРеквизита - Строка - Имя создааваемого поля и он же имя реквизита объекта.
//	Родитель - Произвольный - Ссылка на родителя.
//	ПараметрыОтображения - Структура - Структура по которой заполняются свойства команды.
//	РасположитьПередЭЛементом - ГруппаФормы; ТаблицаФормы; УправляемаяФорма - Элемент перед которым требуется разместить новый элемент.
//
//Пример:
//	ккПодготовкаФорм.ДобавитьПолеФлажкаНаФормуРеквизитОбъекта(ЭтаФорма, "ккВидДоговора", Элементы.ГруппаШапкаПраво);
//
Функция ДобавитьПолеФлажкаНаФормуРеквизитОбъекта(Форма,
											ИмяРеквизита, 
											Родитель = Неопределено,
											ПараметрыОтображения = Неопределено,
											РасположитьПередЭлементом = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыОтображения) = Тип("Структура") Тогда
		Если Не ПараметрыОтображения.Свойство("ПутьКДанным") Тогда
			ПараметрыОтображения.Вставить("ПутьКДанным", "Объект."+ИмяРеквизита);
		КонецЕсли;
	Иначе
		ПараметрыОтображения = Новый Структура;
		ПараметрыОтображения.Вставить("ПутьКДанным", "Объект."+ИмяРеквизита);
	КонецЕсли;
	
	ПолеФормы = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Родитель);
	ПолеФормы.Вид = ВидПоляФормы.ПолеФлажка;
	
	ЗаполнитьЗначенияСвойств(ПолеФормы, ПараметрыОтображения);
	
	Если РасположитьПередЭлементом <> Неопределено Тогда
		ПереместитьЭлемент(ПолеФормы, РасположитьПередЭлементом, Родитель, Форма);
	КонецЕсли;

	ПараметрыОтображения.Удалить("ПутьКДанным");
	
	Возврат ПолеФормы;
	
КонецФункции

// Функция группу кнопок на форму.
//
// Параметры:
//	Форма - УправляемаяФорма - форма для которой выполняется действие.
//	Родитель - КоманднаяПанель - Родитель элемента.
//	РасположитьПередЭлементом - ГруппаФормы; ТаблицаФормы; УправляемаяФорма - Элемент перед которым требуется разместить новый элемент.
//
// Возвращаемое значение:
//	ЭлементФормы - добавленная на форму, группа кнопок формы.
//
Функция ДобавитьГруппуКнопок(Форма,
							Родитель = Неопределено,
							РасположитьПередЭлементом = Неопределено) Экспорт 
	Сч = 0;
	ЭлементНайден = Истина;
	Пока ЭлементНайден = Истина Цикл
		
		Шаблон = НСтр("ru = 'ГруппаКнопокФормы%1'");
		ИмяРеквизита = СтрШаблон(Шаблон, Сч);
		
		Если Форма.Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
			
			ЭлементНайден = Ложь;
			ГруппаКонпокФормы = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ГруппаФормы"), Родитель);
			ГруппаКонпокФормы.Вид = ВидГруппыФормы.ГруппаКнопок;
			
			ПереместитьЭлемент(ГруппаКонпокФормы, РасположитьПередЭлементом, Родитель, Форма);
			
			Возврат ГруппаКонпокФормы;
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПереместитьЭлемент(ПолеФормы, РасположитьПередЭлементом, Родитель, Форма)

	Если РасположитьПередЭлементом <> Неопределено Тогда
		Форма.Элементы.Переместить(ПолеФормы, Родитель, РасположитьПередЭЛементом);
	КонецЕсли;

КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 
#КонецОбласти
